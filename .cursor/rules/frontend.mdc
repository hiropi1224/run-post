---
description: 
globs: 
alwaysApply: true
---
# Next.js + Justd + tRPC プロジェクトのコーディングルール

## Next.js
Next.jsはApp Routerを利用。以下ドキュメントを参照し、常に最新の情報を利用してください。
https://nextjs.org/docs

## Justd
以下ドキュメントを参照し、常に最新の情報を利用してください。
https://getjustd.com/docs/2.x/getting-started/introduction

## コードスタイルと構造
- JavaScript/TypeScriptコードは簡潔に、かつ技術的に記述
- 関数型プログラミングとデクラративなパターンを優先
- クラスの使用は避け、関数コンポーネントを使用
- 反復とモジュール化を重視し、コードの重複を避ける
- 変数名は説明的で、補助動詞を使用（例：isLoading, hasError）
- ファイル構造：エクスポートされるコンポーネント、サブコンポーネント、ヘルパー関数、静的コンテンツの順

## 命名規則
- ディレクトリ名はケバブケース（例：components/auth-wizard）
- コンポーネントはPascalCase
- 関数と変数はcamelCase
- コンポーネントは名前付きエクスポートを優先

## UIコンポーネント（Justd）
- Justdコンポーネントを基本として使用
- React Ariaの機能を最大限活用
- アクセシビリティを重視したコンポーネント設計
- Tailwind CSSによるスタイリング
  - カスタムカラーシステムの活用（50-950のシェード）
  - ユーティリティクラスの適切な使用

## バックエンド統合
### tRPC
- 型安全なAPI通信の実装
- プロシージャの適切な分割と再利用
- エラーハンドリングの実装
- 適切なバリデーションの実装（Zod）

### Drizzle ORM + NeonDB
- スキーマ設計の一貫性
- マイグレーションの適切な管理
- クエリの最適化
- トランザクションの適切な使用

## パフォーマンス最適化
- React Server Componentsの積極的な活用
- 'use client'の最小限の使用
- Suspenseによる適切なローディング状態の管理
- 画像最適化
- ルートベースのコード分割

## エラーハンドリング
- サーバーサイドとクライアントサイドの両方でのエラー処理
- ユーザーフレンドリーなエラーメッセージ
- エッジケースの考慮
- 早期リターンパターンの使用

## アクセシビリティ
- セマンティックなHTML要素の使用
- 適切なARIA属性の実装
- キーボードナビゲーションのサポート
- React Ariaコンポーネントの活用

## 状態管理
- React Query（TanStack Query）の適切な使用
- サーバーステートとクライアントステートの明確な分離
- キャッシュ戦略の実装

## セキュリティ
- 入力値のサニタイズ
- XSS対策
- CSRF対策
- 適切な認証・認可の実装

## テスト
- ユニットテスト（コンポーネント）
- 統合テスト（重要なユーザーフロー）
- E2Eテスト（必要に応じて）

## 国際化（i18n）
- 多言語対応の実装
- 地域に応じたフォーマットの対応

## ベストプラクティス
- コンポーネントの適切な分割
- カスタムフックの作成と再利用
- パフォーマンスの最適化（メモ化、コード分割）
- 適切なドキュメンテーション